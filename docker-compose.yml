version: '3.8'

services:
  proxy:
    build: ./proxy
    image: ecommerce-proxy # Nome da imagem que será construída
    ports:
      - "5000:5000"
    environment:
      - REDIS_HOST=redis-master
    networks:
      - rede_consistencia

  redis-master:
    image: redis:7-alpine
    networks:
      - rede_consistencia

  redis-replica:
    image: redis:7-alpine
    command: redis-server --slaveof redis-master 6379
    depends_on:
      - redis-master
    networks:
      - rede_consistencia

  # CLIENTES DE TESTE (Orquestrados dinamicamente)
  # Todos os serviços de cliente usarão a mesma imagem.

  avaliacoes:
    build: ./client_runner # Define o contexto para construir a imagem
    image: experimento-cliente # Nomeia a imagem que será construída
    depends_on:
      - proxy
    environment:
      - SERVICE_NAME=avaliacoes
      - CONSISTENCY_TYPE=eventual
      - NODE_ID=avaliacoes-{{.Task.Slot}}
    networks:
      - rede_consistencia
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
      restart_policy:
        condition: on-failure

  catalogo:
    build: ./client_runner
    image: experimento-cliente
    depends_on:
      - proxy
    environment:
      - SERVICE_NAME=catalogo
      - CONSISTENCY_TYPE=eventual
      - NODE_ID=catalogo-{{.Task.Slot}}
    networks:
      - rede_consistencia
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
      restart_policy:
        condition: on-failure

  pagamentos:
    build: ./client_runner
    image: experimento-cliente
    depends_on:
      - proxy
    environment:
      - SERVICE_NAME=pagamentos
      - CONSISTENCY_TYPE=strong
      - NODE_ID=pagamentos-{{.Task.Slot}}
    networks:
      - rede_consistencia
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
      restart_policy:
        condition: on-failure

  pedidos:
    build: ./client_runner
    image: experimento-cliente
    depends_on:
      - proxy
    environment:
      - SERVICE_NAME=pedidos
      - CONSISTENCY_TYPE=strong
      - NODE_ID=pedidos-{{.Task.Slot}}
    networks:
      - rede_consistencia
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
      restart_policy:
        condition: on-failure

networks:
  rede_consistencia:
    driver: overlay
    attachable: true